
import java.io.*;
import java.util.*;

public class GutenbergSort {

	public static void main(String[] args) throws IOException{
		// TODO Auto-generated method stub
		
		Scanner scan = new Scanner(System.in);
		boolean quit = false;
		
		fillDictionary("G:\\ComSci\\text\\test.txt");
		
		do{
			System.out.println("Please select your sort kind");
			System.out.println("1. Bubble sort");
			System.out.println("2. Insertion sort");
			System.out.println("3. Selection sort");
			System.out.println("4. Merge sort");
			System.out.println("5. Quick sort");
			
			try {
				
				switch(scan.nextInt()) {
				
				case 1: bubbleSort();
						break;
						
				case 2: insertionSort();
						break;
						
				case 3: selectionSort();
						break;
				
				case 4: //initialize stuffs
						
						String[] text = getFromDictionary();
						FileWriter fw = new FileWriter("H:\\ComSci\\text\\MergeOut.txt");
						PrintWriter print = new PrintWriter(fw);	
						System.out.println("start");
						
						
						//sort 
						text = mergeSort(text, 0, text.length-1);
						
						//export 
						for(int x = 0; x<text.length; x++) {
							
							print.println(text[x]);
							
						}
						
						System.out.println("end");
						
						print.close();
						fw.close();
						
						break;
						
				case 5: //initialize stuffs
						//String[] text2 = getFromDictionary();
						
						String[] text2 = getFromDictionary();
						FileWriter fw2 = new FileWriter("G:\\ComSci\\text\\QuickOut.txt");
						PrintWriter print2 = new PrintWriter(fw2);
						
						System.out.println("start");
						//sort
						quickSort(text2, 0, text2.length-1);
						
						//export 
						for(int x = 0; x<text2.length; x++) {
							
							print2.println(text2[x]);
							
						}
						
						System.out.println("end");
						
						print2.close();
						fw2.close();
						
						break;
				
				case 6: quit = true;
							
				default: System.out.println("Choose from the selection");
				
				}
				
			}
			
			catch(IOException e) {
				System.out.println("array out");
			}
			
		}while(!quit);
		
		scan.close();
		
	}
	
	public static void fillDictionary(String txt) throws IOException {
		

		//scanner printwriter etc.
		Scanner scan = new Scanner(new File(txt));
		FileWriter fw = new FileWriter("G:\\ComSci\\text\\Dictionary.txt");
		PrintWriter print = new PrintWriter(fw);
		
		//go through book
		while(scan.hasNext()) {
			
			//go to lower case
			String s = scan.next().toLowerCase();

			//take away useless format
			s=removePointless(s);
			
			//check length 
			if(s.length()>=3) {
				
				//fill dictionary
				if(words.get(s) == null) {
					
					words.put(s, 1);
					total++;
				} else {
					
					words.put(s, words.get(s)+1);
					total++;
					
				}
			}
			
		}
		
		//make enumeration obj
		Enumeration<String> stuff = words.keys();
		print.println("total: " + total);
		
		//print/save words
		while(stuff.hasMoreElements()) {
			
			String key = stuff.nextElement();
			size++;
			print.println(key + ": count " + words.get(key));
			
		}
		
		scan.close();
		print.close();
		fw.close();
	}
	
	public static String[] getFromDictionary() { 
		
		Enumeration<String> dictionary = words.keys();
		int count = 0;
		String[] sorted = new String[size];
		while(dictionary.hasMoreElements()) {
			
			String word = dictionary.nextElement();
			sorted[count] = word;
			count++;
		}
		
		
		return sorted;
		
	}
	
	public static String removePointless(String text) {
		
		
		//get word
		char arrayInit[] = text.toCharArray();
		
		//make char array out
		ArrayList<Character> array = new ArrayList<Character>();
		
		//initialize return 
		String fin = "";
		
		//go through char array
		for(int x = 0; x<arrayInit.length; x++) {
	
			switch(arrayInit[x]) {
			
			case '.':  break;
			
			case '_': break;
			
			case '[': break;
			
			case ']': break;
			
			case '|': break;
			
			case '*': break;
			
			case ',': break;
			
			case ':': break;
			
			case '"': break;
			
			case '-': break;
			
			case '(': break;
			
			case ')': break;
			
			case '?': break;
			
			case ';': break;
	
			case '0': break;
	
			case '1': break;
	
			case '2': break;
	
			case '3': break;
	
			case '4': break;
	
			case '5': break;
	
			case '6': break;
	
			case '7': break;
	
			case '8': break;
	
			case '9': break;
	
			case '\'': break;
			
			case '!': break;
	
			default: array.add(arrayInit[x]);
						break;
			
			}
				
			
		}
		
		for(int x = 0; x<array.size(); x++) {
			
			fin += array.get(x);
			
		}
		
		return fin;
			
	}

	public static void bubbleSort() throws IOException {
		
		FileWriter fw = new FileWriter("H:\\ComSci\\text\\BubbleOut.txt");
		PrintWriter print = new PrintWriter(fw);
		String[] text = getFromDictionary();
		boolean loopMore = false;
		
		System.out.println("Start");
		do{
			
			loopMore = false;
			for(int j = 0; j<text.length; j++) {
				
				try {
					
					if(text[j].compareTo(text[j+1])>0) {
						
						String temp = text[j];
						text[j] = text[j+1];
						text[j+1] = temp;
						
						loopMore = true;
						
					}
					
				}
				
				catch (RuntimeException e) {
					
				}
				
			}
			
		}while(loopMore);
		
		for(int x = 0; x<text.length; x++) {
			
			print.println(text[x]);
			
		}
		
		System.out.println("done");

		print.close();
		fw.close();
		
	}
	
	public static void insertionSort() throws IOException{
		
		System.out.println("start");
		FileWriter fw = new FileWriter("H:\\ComSci\\text\\InsertionOut.txt");
		PrintWriter print = new PrintWriter(fw);
		String[] text = getFromDictionary();
		
		//on kth pass insert item into it's correct position among first k items in array
		for(int k = 1; k<text.length; k++) {
			
			String itemToInsert = text[k];
			int j = k-1;
			boolean keepGoing = true;
			while((j>=0)&&keepGoing) {
				
				if(itemToInsert.compareTo(text[j])<0) {
					
					text[j+1] = text[j];
					j--;
					if(j==-1) {
						text[0] = itemToInsert;
					}
					
				} else {
					
					keepGoing = false;
					text[j+1] = itemToInsert;
					
				}
				
			}
			
		}
		
		for(int x = 0; x<text.length; x++) {
			
			print.println(text[x]);
			
		}
		
		System.out.println("end");
		
		print.close();
		fw.close();
		
	}
	
	public static void selectionSort() throws IOException{
		
		System.out.println("start");
		FileWriter fw = new FileWriter("H:\\ComSci\\text\\SelectionOut.txt");
		PrintWriter print = new PrintWriter(fw);
		String[] text = getFromDictionary();
		
		int minIndex;
		String min;
		
		for(int i = 0; i<text.length; i++) {
			
			min = text[i];
			minIndex = i;
			
			for(int j = i+1; j<text.length; j++) {	
				
				if(text[j].compareTo(min)<0) {
					
					min = text[j];
					
					minIndex = j;
					
				}
				
			}
			
			text[minIndex] = text[i];
			text[i] = min;
			
		}
		
		for(int x = 0; x<text.length; x++) {
			
			print.println(text[x]);
			
		}
		
		System.out.println("end");
		
		print.close();
		fw.close();
	}
	
	public static String[] mergeSort(String a[], int left, int right) throws IOException{
		
		//if one value
		if(!(right==left)) {
			
			//choose middle
			int middle = (left + right)/2;
			
			//split more
			sort(a, left, middle);
			sort(a, middle+1, right);
			
			//sort
			merge(a, left, middle, right);
			
		}
		
		return a;
		
	}
	
	public static void sort(String a[], int left, int right) throws IOException{
		
		//if there is one value
		if(right==left) return;
		
		//choose middle
		int middle = (left + right)/2;
		
		//split more
		sort(a, left, middle);
		sort(a, middle+1, right);
		
		//sort
		merge(a, left, middle, right);
		
	}
	
	private static void merge(String[] a, int left, int middle, int right) {
		
		//make values
		String tmpArray[] = new String[right-left+1];
		
		int index1 = left;
		int index2 = middle + 1;
		int indx = 0;
		
		//sort based on indexes
		while(index1 <= middle&&index2<=right) {
			
			//for left side
			if(a[index1].compareTo(a[index2])<0) {
				
				tmpArray[indx] = a[index1];
				index1++;
			
			//for right side
			} else {
				
				tmpArray[indx] = a[index2];
				index2++;
				
			}
			
			indx++;
			
		}
		
		//fill rest of it
		while(index1<=middle) {
			
			tmpArray[indx] = a[index1];
			index1++;
			indx++;
		}
		
		while(index2<=right){
			
			tmpArray[indx] = a[index2];
			index2++;
			indx++;
			
		}
		
		//fill array with sorted variables
		for(indx = 0; indx<tmpArray.length; indx++) {
			
			a[left+indx] = tmpArray[indx];
			
		}
		
	}

	/*public static void quickSort(String a[], int left, int right) throws IOException{
		
		if(left<=right) {
			
			int p = partition(a, left, right);
			quickSort(a, left, p-1);
			quickSort(a, p+1, right);
			
		}
		
	}
	
	public static int partition(String a[], int left, int right) {
		
		int pivotIndex = (left+right)/2;
		String pivotValue = a[pivotIndex];
		
		a[pivotIndex] = a[right];
		a[right] = pivotValue;
		
		int storeIndex = left;
		
		for(int i = left; i<right-1; i++) {
			
			if(a[i].compareTo(pivotValue)<0) {
				
				String temp = a[storeIndex];
				a[storeIndex] = a[i];
				a[i] = temp;
				
				
				storeIndex++;
				
			}
			
		}
		
		a[right] = a[storeIndex];
		a[storeIndex] = pivotValue;
		
		
		for(int x = 0; x<a.length; x++) {
			
			System.out.print(a[x]);
			
		}
		
		System.out.println();
		
		return storeIndex;
	}*/
	
	private static void quickSort(String [] array, int lowerIndex, int higherIndex) {
        
        int i = lowerIndex;
        int j = higherIndex;
        // calculate pivot number, I am taking pivot as middle index number
        String pivot = array[lowerIndex+(higherIndex-lowerIndex)/2];
        // Divide into two arrays
        while (i <= j) {
            /**
             * In each iteration, we will identify a number from left side which 
             * is greater then the pivot value, and also we will identify a number 
             * from right side which is less then the pivot value. Once the search 
             * is done, then we exchange both numbers.
             */
            while (array[i].compareTo(pivot)<0) {
                i++;
            }
            while (array[j].compareTo(pivot)>0) {
                j--;
            }
            if (i <= j) {
            	String temp = array[i];
                array[i] = array[j];
                array[j] = temp;
                //move index to next position on both sides
                i++;
                j--;
            }
        }
        // call quickSort() method recursively
        if (lowerIndex < j)
            quickSort(lowerIndex, j);
        if (i < higherIndex)
            quickSort(i, higherIndex);
    }
	
	private static Dictionary<String, Integer> words = new Hashtable<String, Integer>();
	public static int total = 0;
	public static int size = 0;

}
